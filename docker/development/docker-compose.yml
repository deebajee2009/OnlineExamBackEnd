version: '3'

services:
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - dev_network

  hoosh_backend_app: &django
    restart: unless-stopped
    build:
      context: ../../
      dockerfile: docker/development/Dockerfile
    container_name: hoosh_backend_app
    volumes:
      - drf_static:/opt/app/static/
      - drf_media:/opt/app/media/
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    env_file:
      - ../../envs/development/.env
    networks:
      - dev_network
    command: /start

  # nginx:
  #   image: nginx:latest
  #   container_name: nginx
  #   ports:
  #     - "80:80"  # Expose Nginx on port 80
  #   volumes:
  #     - ../../nginx/nginx.conf:/etc/nginx/conf.d/default.conf
  #     - static_volume:/static
  #     - media_volume:/media
  #   depends_on:
  #     - web
  #   networks:
  #     - hoosh_network
  celery_dev:
    <<: *django
    container_name: hoosh_celery_worker_dev
    restart: unless-stopped
    # restart: no
    ports: [ ]
    depends_on:
      - hoosh_backend_app
      - redis
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - CELERY_TASK_ALWAYS_EAGER=False
    networks:
      - dev_network
    command: /startworker

  celery_beat_dev:
    <<: *django
    container_name: hoosh_celery_beat_dev
    restart: on-failure
    # restart: no
    ports: [ ]
    depends_on:
      - hoosh_backend_app
      - redis
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - CELERY_TASK_ALWAYS_EAGER=False
    networks:
      - dev_network
    command: /startbeat
  postgres:
    image: postgres:14
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_DB: dev
      POSTGRES_USER: dev
      POSTGRES_PASSWORD: dev
    networks:
      - dev_network
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

networks:
  dev_network:
    external: true


volumes:
  postgres_data:
    name: postgres_data
  drf_static:
    name: drf_static
  drf_media:
    name: drf_media
